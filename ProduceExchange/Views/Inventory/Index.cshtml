@using ProduceExchange.Models
@model IEnumerable<ProduceExchange.Models.InventoryModels>

@{
    ViewBag.Title = "Inventory";
    ApplicationDbContext db = new ApplicationDbContext();
}

<h2 style="padding-left:15px;">@ViewBag.Title</h2>
<h5 style="padding-left:15px;">View / Edit</h5>

<p>
    <h6 style="text-align:right; padding-right:15px;">@Html.ActionLink("Create New", "Create") | @Html.ActionLink("Return to Inventory Home", "Home")</h6>
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.productType)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.productCategory)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.productVariety)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.productQuantity)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.addDate)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model)
{
    var productTypeName = db.productTypeData.Find(item.productType);
    var productCatName = db.categoryData.Find(item.productCategory);
    <tr>
        
        <td>
            @Html.DisplayFor(modelItem => productTypeName.setProductTypes)
        </td>
        <td>
            @Html.DisplayFor(modelItem => productCatName.categoryType)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.productVariety)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.productQuantity)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.addDate)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>
    </tr>
}

</table>
